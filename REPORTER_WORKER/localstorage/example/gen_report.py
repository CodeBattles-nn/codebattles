# -*- coding: utf-8 -*-
"""Codebattles.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zgmmvq-JoBJlsAtONzosZEQ8a334dloP
"""

import pandas as pd
from matplotlib import pyplot as plt
import numpy as np

all_problems = ("A","B","C", "D","E","F")

def merge(ser):
  for letter in all_problems:
    if letter not in ser.index:
      ser[letter] = 0

df = pd.read_csv("filename.csv")

df

xdf = df.dropna(subset=['score'])
xdf

# df = pd.read_csv("/content/generated_cv.csv")

df = pd.DataFrame()
df["Буква задачи"] = xdf["problem_letter"]
df["Результат в баллах"] = xdf["score"]
df["Имя"] = xdf["id"]
df["Время отправки"] = xdf["send_time"]

df

import matplotlib.pyplot as plt



def graph1(fig,ax,callback=lambda : True):
  task_counts = df['Буква задачи'].value_counts()

  # Сортировка по алфавиту
  task_counts_sorted = task_counts.sort_index()

  merge(task_counts_sorted)

  print(task_counts_sorted)

  # Построение графика с отсортированной осью X
  plt.figure(figsize=(10, 5))
  task_counts_sorted.plot(kind='bar', color='skyblue', ax=ax)

  ax.set_ylabel('Решения')
  ax.set_title('Количество решений по задачам (сортировка по алфавиту)')


  # Настройка графика
  plt.title('Количество решений по задачам (сортировка по алфавиту)')

  plt.ylabel('Количество решений')
  plt.xticks(rotation=0)
  plt.grid(axis='y')

  callback()
  plt.close()



# figure = plt.figure(figsize=(7, 10))
figure = plt.figure(figsize=(10, 6))
axes = figure.subplots(1, 1)
# axes = figure.subplots(2, 1)
graph1(figure,axes)
# graph1(figure,axes[0])
# graph1(figure,axes[1])
plt.show()

import matplotlib.pyplot as plt

def graph2(fig,ax,callback=lambda : True):
  fig = plt.figure()
  # Подсчет количества решений по каждой задаче
  task_counts = df['Буква задачи'].value_counts()

  merge(task_counts)

  # Сортировка по алфавиту
  task_counts_sorted = task_counts.sort_index()



  # Построение графика с отсортированной осью X
  plt.figure(figsize=(10, 6))
  task_counts.plot(kind='bar', color='green',ax=ax)

  # Настройка графика
  plt.title('Количество решений по задачам (сортировка по количеству)')
  plt.xlabel('Буква задачи')
  plt.ylabel('Количество решений')
  plt.xticks(rotation=0)
  plt.grid(axis='y')


  callback()

  # Показ графика
  #plt.show()
  # plt.close()
  #return fig
  # plt.close()

# graph2(plt.show)

figure = plt.figure(figsize=(7, 10))
# figure = plt.figure(figsize=(10, 6))
# axes = figure.subplots(1, 1)
axes = figure.subplots(2, 2)
# graph1(figure,axes)
graph2(figure,axes[0,0])
graph2(figure,axes[0,1])
graph2(figure,axes[1,0])
graph2(figure,axes[1,1])
plt.show()

def graph3(callback=lambda : True):
  fig = plt.figure()
  # Подсчет количества верных решений (>= 50 баллов) для каждой задачи
  df['Верное решение'] = df['Результат в баллах'] >= 50
  correct_solutions_percentage = df.groupby('Буква задачи')['Верное решение'].mean() * 100

  # Сортировка по алфавиту
  correct_solutions_sorted = correct_solutions_percentage.sort_index()
  merge(correct_solutions_sorted)

  # Построение графика с процентом верных решений
  plt.figure(figsize=(10, 6))
  correct_solutions_sorted.plot(kind='bar', color='lightgreen')

  print(correct_solutions_sorted)


  # Настройка графика
  plt.title('Процент верных решений по задачам (>= 50 баллов)')
  plt.xlabel('Буква задачи')
  plt.ylabel('Процент верных решений (%)')
  plt.xticks(rotation=0)
  plt.grid(axis='y')

  # Показ графика
  callback()

  # Показ графика
  #plt.show()
  # plt.close()
  #return fig
  plt.close()

graph3(plt.show)

def graph3_1(callback=lambda : True):
  fig = plt.figure()
  # Подсчет количества верных решений (>= 50 баллов) для каждой задачи
  df['Верное решение'] = df['Результат в баллах'] >= 50
  correct_solutions_count = df.groupby('Буква задачи')['Верное решение'].sum()

  # Сортировка по алфавиту
  correct_solutions_sorted = correct_solutions_count.sort_index()
  merge(correct_solutions_sorted)

  # Построение графика с процентом верных решений
  plt.figure(figsize=(10, 6))
  correct_solutions_sorted.plot(kind='bar', color='lightgreen')

  print(correct_solutions_sorted)


  # Настройка графика
  plt.title('Количество верных решений (>= 50 баллов)')
  plt.xlabel('Буква задачи')
  plt.ylabel('Количество человек, решивших задчу')
  plt.xticks(rotation=0)
  plt.grid(axis='y')

  # Показ графика
  callback()

  # Показ графика
  #plt.show()
  # plt.close()
  #return fig
  plt.close()

graph3_1(plt.show)

def graph4(callback=lambda : True):
  import matplotlib.pyplot as plt

  correct_solutions = df[df["Результат в баллах"] >= 50].shape[0]
  incorrect_solutions = df[df["Результат в баллах"] < 50].shape[0]
  # Данные: количество правильных и неправильных решений
  # correct_solutions = 10  # например, 70 правильных решений
  # incorrect_solutions = 30  # например, 30 неправильных решений

  # Создаем список данных для диаграммы
  data = [correct_solutions, incorrect_solutions]
  labels = ['Правильные решения', 'Неправильные решения']
  colors = ['#4CAF50', '#F44336']  # зеленый для правильных, красный для неправильных

  # Построение круговой диаграммы
  plt.figure(figsize=(10,6))
  plt.pie(data, labels=labels, autopct='%1.1f%%', startangle=90, colors=colors, wedgeprops={'edgecolor': 'black'})

  # Настройка диаграммы
  plt.title('Процент правильных и неправильных решений')
  # plt.axis('equal')  # чтобы круг был кругом, а не овалом

  # Показ диаграммы
  # Показ графика
  callback()

  # Показ графика
  #plt.show()
  # plt.close()
  #return fig
  plt.close()

graph4(plt.show)

df['Время отправки'] = pd.to_datetime(df['Время отправки'])

import matplotlib.pyplot as plt

def titlegen(callback=lambda : True):
  import matplotlib.pyplot as plt

  fig, ax = plt.subplots(figsize=(10, 6))

  # Убираем оси
  ax.axis('off')

  champ_name = "10Г урок 13.09"

  # Добавляем текст на график
  ax.text(0.5, 0.7, 'Codebattles отчет', fontsize=25, ha='center', va='center')
  ax.text(0.5, 0.5, f'Соревнование: {champ_name}', fontsize=18, ha='center', va='center')

  ax.text(0.5, 0.4, f'Начало: 13.09.2008 15:00:00', fontsize=18, ha='center', va='center')
  ax.text(0.5, 0, f'Отчет сформирован: 13.09.2008 15:00:00', fontsize=18, ha='center', va='center')

  # Показ диаграммы
  # Показ графика
  callback()

  # Показ графика
  #plt.show()
  # plt.close()
  #return fig
  plt.close()

titlegen(plt.show)

# Группировка по времени отправок с точностью до часа

df_grouped = df.groupby(df['Время отправки'].dt.floor('h')).size()

# Построение графика
plt.figure(figsize=(10,6))
plt.plot(df_grouped.index, df_grouped.values, marker='o', linestyle='-', color='b')

# Настройки графика
plt.title('Количество отправок по времени')
plt.xlabel('Время отправки (с точностью до часа)')
plt.ylabel('Количество отправок')
plt.xticks(rotation=45)  # Повернуть метки оси X для лучшей читаемости
plt.grid(True)

# Показ графика
plt.tight_layout()
plt.show()

import datetime
import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages

# Получение текущей даты и времени
timestamp = datetime.datetime.now()

# Форматирование таймстемпа без пробелов
timestamp_str = timestamp.strftime("%Y%m%d_%H%M%S")

with PdfPages(f'{timestamp_str}.pdf') as pdf:
  # titlegen(pdf.savefig)
  # graph1(pdf.savefig)
  # graph2(pdf.savefig)
  # graph3(pdf.savefig)
  # graph3_1(pdf.savefig)
  # graph4(pdf.savefig)

  figure = plt.figure(figsize=(8, 12))
  # figure = plt.figure(figsize=(10, 6))
  # axes = figure.subplots(1, 1)
  axes = figure.subplots(2, 2)
  # graph1(figure,axes)
  graph2(figure,axes[0,0])
  graph2(figure,axes[0,1])
  graph2(figure,axes[1,0])
  graph2(figure,axes[1,1])
  pdf.savefig(figure)
  plt.close()

  figure2 = plt.figure(figsize=(8, 12))
  # figure = plt.figure(figsize=(10, 6))
  # axes = figure.subplots(1, 1)
  axes = figure2.subplots(2, 1)
  # graph1(figure,axes)
  graph1(figure2,axes[0])
  graph1(figure2,axes[1])
  # graph1(figure,axes[1,0])
  # graph1(figure,axes[1,1])
  pdf.savefig(figure2)
  plt.close()

  # figure.close()
  # plt.show()